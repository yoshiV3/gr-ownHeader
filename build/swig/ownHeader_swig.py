# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ownHeader_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ownHeader_swig')
    _ownHeader_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ownHeader_swig', [dirname(__file__)])
        except ImportError:
            import _ownHeader_swig
            return _ownHeader_swig
        try:
            _mod = imp.load_module('_ownHeader_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ownHeader_swig = swig_import_helper()
    del swig_import_helper
else:
    import _ownHeader_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _ownHeader_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _ownHeader_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _ownHeader_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _ownHeader_swig.high_res_timer_epoch()
class append_header_bb(object):
    """Proxy of C++ gr::ownHeader::append_header_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & len_tag_key) -> append_header_bb_sptr"""
        return _ownHeader_swig.append_header_bb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ownHeader_swig.delete_append_header_bb
    __del__ = lambda self: None
append_header_bb_swigregister = _ownHeader_swig.append_header_bb_swigregister
append_header_bb_swigregister(append_header_bb)

def append_header_bb_make(*args, **kwargs):
    """append_header_bb_make(std::string const & len_tag_key) -> append_header_bb_sptr"""
    return _ownHeader_swig.append_header_bb_make(*args, **kwargs)

class append_header_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ownHeader::append_header_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ownHeader::append_header_bb)> self) -> append_header_bb_sptr
        __init__(boost::shared_ptr<(gr::ownHeader::append_header_bb)> self, append_header_bb p) -> append_header_bb_sptr
        """
        this = _ownHeader_swig.new_append_header_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(append_header_bb_sptr self) -> append_header_bb"""
        return _ownHeader_swig.append_header_bb_sptr___deref__(self)

    __swig_destroy__ = _ownHeader_swig.delete_append_header_bb_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(append_header_bb_sptr self, std::string const & len_tag_key) -> append_header_bb_sptr"""
        return _ownHeader_swig.append_header_bb_sptr_make(self, *args, **kwargs)


    def history(self):
        """history(append_header_bb_sptr self) -> unsigned int"""
        return _ownHeader_swig.append_header_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(append_header_bb_sptr self, int which, int delay)
        declare_sample_delay(append_header_bb_sptr self, unsigned int delay)
        """
        return _ownHeader_swig.append_header_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(append_header_bb_sptr self, int which) -> unsigned int"""
        return _ownHeader_swig.append_header_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(append_header_bb_sptr self) -> int"""
        return _ownHeader_swig.append_header_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(append_header_bb_sptr self) -> double"""
        return _ownHeader_swig.append_header_bb_sptr_relative_rate(self)


    def start(self):
        """start(append_header_bb_sptr self) -> bool"""
        return _ownHeader_swig.append_header_bb_sptr_start(self)


    def stop(self):
        """stop(append_header_bb_sptr self) -> bool"""
        return _ownHeader_swig.append_header_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(append_header_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _ownHeader_swig.append_header_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(append_header_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _ownHeader_swig.append_header_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(append_header_bb_sptr self) -> int"""
        return _ownHeader_swig.append_header_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(append_header_bb_sptr self, int m)"""
        return _ownHeader_swig.append_header_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(append_header_bb_sptr self)"""
        return _ownHeader_swig.append_header_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(append_header_bb_sptr self) -> bool"""
        return _ownHeader_swig.append_header_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(append_header_bb_sptr self, int m)"""
        return _ownHeader_swig.append_header_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(append_header_bb_sptr self) -> int"""
        return _ownHeader_swig.append_header_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(append_header_bb_sptr self, int i) -> long"""
        return _ownHeader_swig.append_header_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(append_header_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(append_header_bb_sptr self, int port, long max_output_buffer)
        """
        return _ownHeader_swig.append_header_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(append_header_bb_sptr self, int i) -> long"""
        return _ownHeader_swig.append_header_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(append_header_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(append_header_bb_sptr self, int port, long min_output_buffer)
        """
        return _ownHeader_swig.append_header_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(append_header_bb_sptr self, int which) -> float
        pc_input_buffers_full(append_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.append_header_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(append_header_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(append_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.append_header_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(append_header_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(append_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.append_header_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(append_header_bb_sptr self, int which) -> float
        pc_output_buffers_full(append_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.append_header_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(append_header_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(append_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.append_header_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(append_header_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(append_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.append_header_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(append_header_bb_sptr self) -> float"""
        return _ownHeader_swig.append_header_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(append_header_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ownHeader_swig.append_header_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(append_header_bb_sptr self)"""
        return _ownHeader_swig.append_header_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(append_header_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ownHeader_swig.append_header_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(append_header_bb_sptr self) -> int"""
        return _ownHeader_swig.append_header_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(append_header_bb_sptr self) -> int"""
        return _ownHeader_swig.append_header_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(append_header_bb_sptr self, int priority) -> int"""
        return _ownHeader_swig.append_header_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(append_header_bb_sptr self) -> std::string"""
        return _ownHeader_swig.append_header_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(append_header_bb_sptr self) -> std::string"""
        return _ownHeader_swig.append_header_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(append_header_bb_sptr self) -> io_signature_sptr"""
        return _ownHeader_swig.append_header_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(append_header_bb_sptr self) -> io_signature_sptr"""
        return _ownHeader_swig.append_header_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(append_header_bb_sptr self) -> long"""
        return _ownHeader_swig.append_header_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(append_header_bb_sptr self) -> basic_block_sptr"""
        return _ownHeader_swig.append_header_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(append_header_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _ownHeader_swig.append_header_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(append_header_bb_sptr self) -> std::string"""
        return _ownHeader_swig.append_header_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(append_header_bb_sptr self, std::string name)"""
        return _ownHeader_swig.append_header_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(append_header_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ownHeader_swig.append_header_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(append_header_bb_sptr self) -> swig_int_ptr"""
        return _ownHeader_swig.append_header_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(append_header_bb_sptr self) -> swig_int_ptr"""
        return _ownHeader_swig.append_header_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(append_header_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ownHeader_swig.append_header_bb_sptr_message_subscribers(self, which_port)

append_header_bb_sptr_swigregister = _ownHeader_swig.append_header_bb_sptr_swigregister
append_header_bb_sptr_swigregister(append_header_bb_sptr)


append_header_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
append_header_bb = append_header_bb.make;

class generate_header_bb(object):
    """Proxy of C++ gr::ownHeader::generate_header_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & len_tag_key) -> generate_header_bb_sptr"""
        return _ownHeader_swig.generate_header_bb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ownHeader_swig.delete_generate_header_bb
    __del__ = lambda self: None
generate_header_bb_swigregister = _ownHeader_swig.generate_header_bb_swigregister
generate_header_bb_swigregister(generate_header_bb)

def generate_header_bb_make(*args, **kwargs):
    """generate_header_bb_make(std::string const & len_tag_key) -> generate_header_bb_sptr"""
    return _ownHeader_swig.generate_header_bb_make(*args, **kwargs)

class generate_header_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ownHeader::generate_header_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ownHeader::generate_header_bb)> self) -> generate_header_bb_sptr
        __init__(boost::shared_ptr<(gr::ownHeader::generate_header_bb)> self, generate_header_bb p) -> generate_header_bb_sptr
        """
        this = _ownHeader_swig.new_generate_header_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(generate_header_bb_sptr self) -> generate_header_bb"""
        return _ownHeader_swig.generate_header_bb_sptr___deref__(self)

    __swig_destroy__ = _ownHeader_swig.delete_generate_header_bb_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(generate_header_bb_sptr self, std::string const & len_tag_key) -> generate_header_bb_sptr"""
        return _ownHeader_swig.generate_header_bb_sptr_make(self, *args, **kwargs)


    def history(self):
        """history(generate_header_bb_sptr self) -> unsigned int"""
        return _ownHeader_swig.generate_header_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(generate_header_bb_sptr self, int which, int delay)
        declare_sample_delay(generate_header_bb_sptr self, unsigned int delay)
        """
        return _ownHeader_swig.generate_header_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(generate_header_bb_sptr self, int which) -> unsigned int"""
        return _ownHeader_swig.generate_header_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(generate_header_bb_sptr self) -> int"""
        return _ownHeader_swig.generate_header_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(generate_header_bb_sptr self) -> double"""
        return _ownHeader_swig.generate_header_bb_sptr_relative_rate(self)


    def start(self):
        """start(generate_header_bb_sptr self) -> bool"""
        return _ownHeader_swig.generate_header_bb_sptr_start(self)


    def stop(self):
        """stop(generate_header_bb_sptr self) -> bool"""
        return _ownHeader_swig.generate_header_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(generate_header_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _ownHeader_swig.generate_header_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(generate_header_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _ownHeader_swig.generate_header_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(generate_header_bb_sptr self) -> int"""
        return _ownHeader_swig.generate_header_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(generate_header_bb_sptr self, int m)"""
        return _ownHeader_swig.generate_header_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(generate_header_bb_sptr self)"""
        return _ownHeader_swig.generate_header_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(generate_header_bb_sptr self) -> bool"""
        return _ownHeader_swig.generate_header_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(generate_header_bb_sptr self, int m)"""
        return _ownHeader_swig.generate_header_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(generate_header_bb_sptr self) -> int"""
        return _ownHeader_swig.generate_header_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(generate_header_bb_sptr self, int i) -> long"""
        return _ownHeader_swig.generate_header_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(generate_header_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(generate_header_bb_sptr self, int port, long max_output_buffer)
        """
        return _ownHeader_swig.generate_header_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(generate_header_bb_sptr self, int i) -> long"""
        return _ownHeader_swig.generate_header_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(generate_header_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(generate_header_bb_sptr self, int port, long min_output_buffer)
        """
        return _ownHeader_swig.generate_header_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(generate_header_bb_sptr self, int which) -> float
        pc_input_buffers_full(generate_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.generate_header_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(generate_header_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(generate_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.generate_header_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(generate_header_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(generate_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.generate_header_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(generate_header_bb_sptr self, int which) -> float
        pc_output_buffers_full(generate_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.generate_header_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(generate_header_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(generate_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.generate_header_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(generate_header_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(generate_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.generate_header_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(generate_header_bb_sptr self) -> float"""
        return _ownHeader_swig.generate_header_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(generate_header_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ownHeader_swig.generate_header_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(generate_header_bb_sptr self)"""
        return _ownHeader_swig.generate_header_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(generate_header_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ownHeader_swig.generate_header_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(generate_header_bb_sptr self) -> int"""
        return _ownHeader_swig.generate_header_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(generate_header_bb_sptr self) -> int"""
        return _ownHeader_swig.generate_header_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(generate_header_bb_sptr self, int priority) -> int"""
        return _ownHeader_swig.generate_header_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(generate_header_bb_sptr self) -> std::string"""
        return _ownHeader_swig.generate_header_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(generate_header_bb_sptr self) -> std::string"""
        return _ownHeader_swig.generate_header_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(generate_header_bb_sptr self) -> io_signature_sptr"""
        return _ownHeader_swig.generate_header_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(generate_header_bb_sptr self) -> io_signature_sptr"""
        return _ownHeader_swig.generate_header_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(generate_header_bb_sptr self) -> long"""
        return _ownHeader_swig.generate_header_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(generate_header_bb_sptr self) -> basic_block_sptr"""
        return _ownHeader_swig.generate_header_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(generate_header_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _ownHeader_swig.generate_header_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(generate_header_bb_sptr self) -> std::string"""
        return _ownHeader_swig.generate_header_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(generate_header_bb_sptr self, std::string name)"""
        return _ownHeader_swig.generate_header_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(generate_header_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ownHeader_swig.generate_header_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(generate_header_bb_sptr self) -> swig_int_ptr"""
        return _ownHeader_swig.generate_header_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(generate_header_bb_sptr self) -> swig_int_ptr"""
        return _ownHeader_swig.generate_header_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(generate_header_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ownHeader_swig.generate_header_bb_sptr_message_subscribers(self, which_port)

generate_header_bb_sptr_swigregister = _ownHeader_swig.generate_header_bb_sptr_swigregister
generate_header_bb_sptr_swigregister(generate_header_bb_sptr)


generate_header_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
generate_header_bb = generate_header_bb.make;

class parse_header_bb(object):
    """Proxy of C++ gr::ownHeader::parse_header_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & tag_len_key, std::string const & frame_len_key, unsigned char max_symbol=1, unsigned char own_id=1, unsigned char max_padding=0) -> parse_header_bb_sptr"""
        return _ownHeader_swig.parse_header_bb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ownHeader_swig.delete_parse_header_bb
    __del__ = lambda self: None
parse_header_bb_swigregister = _ownHeader_swig.parse_header_bb_swigregister
parse_header_bb_swigregister(parse_header_bb)

def parse_header_bb_make(*args, **kwargs):
    """parse_header_bb_make(std::string const & tag_len_key, std::string const & frame_len_key, unsigned char max_symbol=1, unsigned char own_id=1, unsigned char max_padding=0) -> parse_header_bb_sptr"""
    return _ownHeader_swig.parse_header_bb_make(*args, **kwargs)

class parse_header_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ownHeader::parse_header_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ownHeader::parse_header_bb)> self) -> parse_header_bb_sptr
        __init__(boost::shared_ptr<(gr::ownHeader::parse_header_bb)> self, parse_header_bb p) -> parse_header_bb_sptr
        """
        this = _ownHeader_swig.new_parse_header_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(parse_header_bb_sptr self) -> parse_header_bb"""
        return _ownHeader_swig.parse_header_bb_sptr___deref__(self)

    __swig_destroy__ = _ownHeader_swig.delete_parse_header_bb_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(parse_header_bb_sptr self, std::string const & tag_len_key, std::string const & frame_len_key, unsigned char max_symbol=1, unsigned char own_id=1, unsigned char max_padding=0) -> parse_header_bb_sptr"""
        return _ownHeader_swig.parse_header_bb_sptr_make(self, *args, **kwargs)


    def history(self):
        """history(parse_header_bb_sptr self) -> unsigned int"""
        return _ownHeader_swig.parse_header_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(parse_header_bb_sptr self, int which, int delay)
        declare_sample_delay(parse_header_bb_sptr self, unsigned int delay)
        """
        return _ownHeader_swig.parse_header_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(parse_header_bb_sptr self, int which) -> unsigned int"""
        return _ownHeader_swig.parse_header_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(parse_header_bb_sptr self) -> int"""
        return _ownHeader_swig.parse_header_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(parse_header_bb_sptr self) -> double"""
        return _ownHeader_swig.parse_header_bb_sptr_relative_rate(self)


    def start(self):
        """start(parse_header_bb_sptr self) -> bool"""
        return _ownHeader_swig.parse_header_bb_sptr_start(self)


    def stop(self):
        """stop(parse_header_bb_sptr self) -> bool"""
        return _ownHeader_swig.parse_header_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(parse_header_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _ownHeader_swig.parse_header_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(parse_header_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _ownHeader_swig.parse_header_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(parse_header_bb_sptr self) -> int"""
        return _ownHeader_swig.parse_header_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(parse_header_bb_sptr self, int m)"""
        return _ownHeader_swig.parse_header_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(parse_header_bb_sptr self)"""
        return _ownHeader_swig.parse_header_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(parse_header_bb_sptr self) -> bool"""
        return _ownHeader_swig.parse_header_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(parse_header_bb_sptr self, int m)"""
        return _ownHeader_swig.parse_header_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(parse_header_bb_sptr self) -> int"""
        return _ownHeader_swig.parse_header_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(parse_header_bb_sptr self, int i) -> long"""
        return _ownHeader_swig.parse_header_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(parse_header_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(parse_header_bb_sptr self, int port, long max_output_buffer)
        """
        return _ownHeader_swig.parse_header_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(parse_header_bb_sptr self, int i) -> long"""
        return _ownHeader_swig.parse_header_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(parse_header_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(parse_header_bb_sptr self, int port, long min_output_buffer)
        """
        return _ownHeader_swig.parse_header_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(parse_header_bb_sptr self, int which) -> float
        pc_input_buffers_full(parse_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.parse_header_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(parse_header_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(parse_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.parse_header_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(parse_header_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(parse_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.parse_header_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(parse_header_bb_sptr self, int which) -> float
        pc_output_buffers_full(parse_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.parse_header_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(parse_header_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(parse_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.parse_header_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(parse_header_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(parse_header_bb_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.parse_header_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(parse_header_bb_sptr self) -> float"""
        return _ownHeader_swig.parse_header_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(parse_header_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ownHeader_swig.parse_header_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(parse_header_bb_sptr self)"""
        return _ownHeader_swig.parse_header_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(parse_header_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ownHeader_swig.parse_header_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(parse_header_bb_sptr self) -> int"""
        return _ownHeader_swig.parse_header_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(parse_header_bb_sptr self) -> int"""
        return _ownHeader_swig.parse_header_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(parse_header_bb_sptr self, int priority) -> int"""
        return _ownHeader_swig.parse_header_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(parse_header_bb_sptr self) -> std::string"""
        return _ownHeader_swig.parse_header_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(parse_header_bb_sptr self) -> std::string"""
        return _ownHeader_swig.parse_header_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(parse_header_bb_sptr self) -> io_signature_sptr"""
        return _ownHeader_swig.parse_header_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(parse_header_bb_sptr self) -> io_signature_sptr"""
        return _ownHeader_swig.parse_header_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(parse_header_bb_sptr self) -> long"""
        return _ownHeader_swig.parse_header_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(parse_header_bb_sptr self) -> basic_block_sptr"""
        return _ownHeader_swig.parse_header_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(parse_header_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _ownHeader_swig.parse_header_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(parse_header_bb_sptr self) -> std::string"""
        return _ownHeader_swig.parse_header_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(parse_header_bb_sptr self, std::string name)"""
        return _ownHeader_swig.parse_header_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(parse_header_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ownHeader_swig.parse_header_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(parse_header_bb_sptr self) -> swig_int_ptr"""
        return _ownHeader_swig.parse_header_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(parse_header_bb_sptr self) -> swig_int_ptr"""
        return _ownHeader_swig.parse_header_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(parse_header_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ownHeader_swig.parse_header_bb_sptr_message_subscribers(self, which_port)

parse_header_bb_sptr_swigregister = _ownHeader_swig.parse_header_bb_sptr_swigregister
parse_header_bb_sptr_swigregister(parse_header_bb_sptr)


parse_header_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
parse_header_bb = parse_header_bb.make;

class send_to_multiplexer_b(object):
    """Proxy of C++ gr::ownHeader::send_to_multiplexer_b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & tag_len_key) -> send_to_multiplexer_b_sptr"""
        return _ownHeader_swig.send_to_multiplexer_b_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _ownHeader_swig.delete_send_to_multiplexer_b
    __del__ = lambda self: None
send_to_multiplexer_b_swigregister = _ownHeader_swig.send_to_multiplexer_b_swigregister
send_to_multiplexer_b_swigregister(send_to_multiplexer_b)

def send_to_multiplexer_b_make(*args, **kwargs):
    """send_to_multiplexer_b_make(std::string const & tag_len_key) -> send_to_multiplexer_b_sptr"""
    return _ownHeader_swig.send_to_multiplexer_b_make(*args, **kwargs)

class send_to_multiplexer_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ownHeader::send_to_multiplexer_b)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ownHeader::send_to_multiplexer_b)> self) -> send_to_multiplexer_b_sptr
        __init__(boost::shared_ptr<(gr::ownHeader::send_to_multiplexer_b)> self, send_to_multiplexer_b p) -> send_to_multiplexer_b_sptr
        """
        this = _ownHeader_swig.new_send_to_multiplexer_b_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(send_to_multiplexer_b_sptr self) -> send_to_multiplexer_b"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr___deref__(self)

    __swig_destroy__ = _ownHeader_swig.delete_send_to_multiplexer_b_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(send_to_multiplexer_b_sptr self, std::string const & tag_len_key) -> send_to_multiplexer_b_sptr"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_make(self, *args, **kwargs)


    def history(self):
        """history(send_to_multiplexer_b_sptr self) -> unsigned int"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(send_to_multiplexer_b_sptr self, int which, int delay)
        declare_sample_delay(send_to_multiplexer_b_sptr self, unsigned int delay)
        """
        return _ownHeader_swig.send_to_multiplexer_b_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(send_to_multiplexer_b_sptr self, int which) -> unsigned int"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(send_to_multiplexer_b_sptr self) -> int"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(send_to_multiplexer_b_sptr self) -> double"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_relative_rate(self)


    def start(self):
        """start(send_to_multiplexer_b_sptr self) -> bool"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_start(self)


    def stop(self):
        """stop(send_to_multiplexer_b_sptr self) -> bool"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(send_to_multiplexer_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(send_to_multiplexer_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(send_to_multiplexer_b_sptr self) -> int"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(send_to_multiplexer_b_sptr self, int m)"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(send_to_multiplexer_b_sptr self)"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(send_to_multiplexer_b_sptr self) -> bool"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(send_to_multiplexer_b_sptr self, int m)"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(send_to_multiplexer_b_sptr self) -> int"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(send_to_multiplexer_b_sptr self, int i) -> long"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(send_to_multiplexer_b_sptr self, long max_output_buffer)
        set_max_output_buffer(send_to_multiplexer_b_sptr self, int port, long max_output_buffer)
        """
        return _ownHeader_swig.send_to_multiplexer_b_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(send_to_multiplexer_b_sptr self, int i) -> long"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(send_to_multiplexer_b_sptr self, long min_output_buffer)
        set_min_output_buffer(send_to_multiplexer_b_sptr self, int port, long min_output_buffer)
        """
        return _ownHeader_swig.send_to_multiplexer_b_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(send_to_multiplexer_b_sptr self, int which) -> float
        pc_input_buffers_full(send_to_multiplexer_b_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(send_to_multiplexer_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(send_to_multiplexer_b_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(send_to_multiplexer_b_sptr self, int which) -> float
        pc_input_buffers_full_var(send_to_multiplexer_b_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(send_to_multiplexer_b_sptr self, int which) -> float
        pc_output_buffers_full(send_to_multiplexer_b_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(send_to_multiplexer_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(send_to_multiplexer_b_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(send_to_multiplexer_b_sptr self, int which) -> float
        pc_output_buffers_full_var(send_to_multiplexer_b_sptr self) -> pmt_vector_float
        """
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(send_to_multiplexer_b_sptr self) -> float"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(send_to_multiplexer_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(send_to_multiplexer_b_sptr self)"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(send_to_multiplexer_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(send_to_multiplexer_b_sptr self) -> int"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(send_to_multiplexer_b_sptr self) -> int"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(send_to_multiplexer_b_sptr self, int priority) -> int"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(send_to_multiplexer_b_sptr self) -> std::string"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_name(self)


    def symbol_name(self):
        """symbol_name(send_to_multiplexer_b_sptr self) -> std::string"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(send_to_multiplexer_b_sptr self) -> io_signature_sptr"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(send_to_multiplexer_b_sptr self) -> io_signature_sptr"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(send_to_multiplexer_b_sptr self) -> long"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(send_to_multiplexer_b_sptr self) -> basic_block_sptr"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(send_to_multiplexer_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(send_to_multiplexer_b_sptr self) -> std::string"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(send_to_multiplexer_b_sptr self, std::string name)"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(send_to_multiplexer_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(send_to_multiplexer_b_sptr self) -> swig_int_ptr"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(send_to_multiplexer_b_sptr self) -> swig_int_ptr"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(send_to_multiplexer_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ownHeader_swig.send_to_multiplexer_b_sptr_message_subscribers(self, which_port)

send_to_multiplexer_b_sptr_swigregister = _ownHeader_swig.send_to_multiplexer_b_sptr_swigregister
send_to_multiplexer_b_sptr_swigregister(send_to_multiplexer_b_sptr)


send_to_multiplexer_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
send_to_multiplexer_b = send_to_multiplexer_b.make;



